package com.server.informaViesCat.Controllers;

import com.server.informaViesCat.Business.UserBusiness;
import com.server.informaViesCat.Entities.AESEncryptionService;
import com.server.informaViesCat.Entities.UnauthorizedException;
import com.server.informaViesCat.Entities.User.User;
import com.server.informaViesCat.Entities.User.UserLoginRequest;
import com.server.informaViesCat.Entities.User.UserLogoutRequest;
import com.server.informaViesCat.Entities.User.UserRemoveRequest;
import com.server.informaViesCat.Entities.User.UserRequest;
import com.server.informaViesCat.Entities.User.UserResponse;
import com.server.informaViesCat.Interfaces.IRepository.ISessionRepository;
import com.server.informaViesCat.Repository.SessionRepository;
import java.util.List;
import java.util.UUID;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 * @author leith Controlador d'accès per el login i el logout
 */
@RestController
@RequestMapping("/api/users")
public class UserController {

    private UserBusiness userBusiness = null;
    private ISessionRepository sessionRepo = null;

    public UserController() {

        this.userBusiness = new UserBusiness();
        this.sessionRepo = new SessionRepository();

    }

    /**
     * Conecta el usuari
     *
     * @param userLoginRequest
     * @return Retorna una entitat user amb el seu estat
     */
    @GetMapping("/login")
    public ResponseEntity<String> loginByRequest(@RequestBody String userLoginRequest) {

        User userObtained = null;

        UserLoginRequest request = (UserLoginRequest) AESEncryptionService.decryptObject(userLoginRequest, UserLoginRequest.class);

        userObtained = userBusiness.Login(request.UserName, request.Password);
        if (userObtained != null) {

            String sessionId = UUID.randomUUID().toString();
            UserResponse userResponse = new UserResponse(userObtained, sessionId);
            this.sessionRepo.AddSession(sessionId, userObtained.getId());

            String encryptedObject = AESEncryptionService.encryptObject(userResponse);

            return new ResponseEntity<>(encryptedObject, HttpStatus.OK);
        }

        return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);

    }

    @GetMapping("/logout")
    public ResponseEntity<Boolean> logout(@RequestBody String userLogoutRequest) {

        UserLogoutRequest request = (UserLogoutRequest) AESEncryptionService.decryptObject(userLogoutRequest, UserLogoutRequest.class);

        if (isSessionActive(request.sessionId)) {

            boolean logoutSucces = userBusiness.Logout(request.userId);
            if (logoutSucces) {
                ResponseEntity.ok(logoutSucces);
                boolean closed = this.sessionRepo.CloseSession(request.sessionId);
                return new ResponseEntity<>(closed, HttpStatus.OK);
            }

            return (ResponseEntity<Boolean>) ResponseEntity.noContent();

        } else {
            return new ResponseEntity<>(false, HttpStatus.UNAUTHORIZED);
        }
    }

    /**
     * Obté tots els usuaris
     *
     * @param UserRequest
     * @return llistat dels usuarios
     */
    @GetMapping("/getall")
    public ResponseEntity<String> getAll(@RequestBody String UserRequest) {

        UserRequest request = (UserRequest) AESEncryptionService.decryptObject(UserRequest, UserRequest.class);

        if (isSessionActive(request.sessionId)) {

            var userList = userBusiness.GetAll();
            if (userList != null) {
                String encryptedObject = AESEncryptionService.encryptObject(userList);
                return ResponseEntity.ok(encryptedObject);
            }

            return (ResponseEntity<String>) ResponseEntity.noContent();
        } else {
            return new ResponseEntity<>("", HttpStatus.UNAUTHORIZED);
        }
    }

    /**
     * Crea el usuari
     *
     * @param UserRequest
     * @return Retorna missagte si ha creat OK o un badrequest
     */
    @PutMapping("/create")
    @Consumes("MediaType.APPLICATION_JSON")
    @Produces("MediaType.APPLICATION_JSON")
    public ResponseEntity<String> create(@RequestBody String userRequest) {

        UserRequest request = (UserRequest) AESEncryptionService.decryptObject(userRequest, UserRequest.class);

        if (isSessionActive(request.sessionId)) {

            if (userBusiness.CreateNewUser(request.user)) {

                String encryptedObject = AESEncryptionService.encryptObject("Usuari creat.");
                return ResponseEntity.ok(encryptedObject);

            } else {
                return ResponseEntity.status(HttpStatus.CONFLICT).body("El recurs ja existeix");
            }
        } else {
            return new ResponseEntity<>("", HttpStatus.UNAUTHORIZED);
        }

    }

    /**
     * Crea el usuari
     *
     * @param UserRequest
     * @return Retorna missagte si ha creat OK o un badrequest
     */
    @PutMapping("/modify")
    @Consumes("MediaType.APPLICATION_JSON")
    @Produces("MediaType.APPLICATION_JSON")
    public ResponseEntity<String> modify(@RequestBody String UserRequest) {

        UserRequest request = (UserRequest) AESEncryptionService.decryptObject(UserRequest, UserRequest.class);

        if (isSessionActive(request.sessionId)) {
            if (userBusiness.Modify(request.user)) {

                String encryptedObject = AESEncryptionService.encryptObject("Usuari modificat.");
                return ResponseEntity.ok(encryptedObject);

            } else {
                return ResponseEntity.status(HttpStatus.NOT_MODIFIED).body("No es pot modificar");
            }
        } else {
            return new ResponseEntity<>("", HttpStatus.UNAUTHORIZED);
        }
    }

    /**
     * Elimina el usuari
     *
     * @param userRemoveRequest
     * @return Retorna missagte si ha elimnat OK o un badrequest
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> delete(@RequestBody String userRemoveRequest) {

        UserRemoveRequest request = (UserRemoveRequest) AESEncryptionService.decryptObject(userRemoveRequest, UserRemoveRequest.class);

        if (isSessionActive(request.sessionId)) {
            if (userBusiness.Delete(request.userId)) {
                String encryptedObject = AESEncryptionService.encryptObject("Usuari eliminat.");
                return ResponseEntity.ok(encryptedObject);

            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No existeix");
            }
        } else {
            return new ResponseEntity<>("", HttpStatus.UNAUTHORIZED);
        }
    }

    /**
     * Decrypta una entitat user (proves)s
     *
     * @param userEncrypted
     * @return usuari encriptat
     */
    @GetMapping("/decrypt")
    public ResponseEntity<UserResponse> decrypt(@RequestBody String userEncrypted
    ) {

        UserResponse user = (UserResponse) AESEncryptionService.decryptObject(userEncrypted, UserResponse.class);

        return ResponseEntity.ok(user);

    }

    /**
     * Decrypta una entitat user (proves)
     *
     * @param text
     * @return text encriptat
     */
    @GetMapping("/encript/{text}")
    public ResponseEntity<String> encript(@PathVariable String text
    ) {

        String txt = AESEncryptionService.EncryptFixed(text);
        return ResponseEntity.ok(txt);

    }

    /**
     * Decrypta una entitat user (proves)
     *
     * @param req
     * @return text encriptat
     */
    @GetMapping("/UserLoginRequestEncript")
    public ResponseEntity<String> UserLoginRequestEncript(@RequestBody UserLoginRequest req
    ) {

        String txt = AESEncryptionService.encryptObject(req);
        return ResponseEntity.ok(txt);

    }

    /**
     * Decrypta una entitat user (proves)
     *
     * @param req
     * @return text encriptat
     */
    @GetMapping("/UserLogoutRequestEncript")
    public ResponseEntity<String> UserLogoutRequestEncript(@RequestBody UserLogoutRequest req
    ) {

        String txt = AESEncryptionService.encryptObject(req);
        return ResponseEntity.ok(txt);

    }

    /**
     * Decrypta una entitat user (proves)
     *
     * @param req
     * @return text encriptat
     */
    @GetMapping("/encryptObject")
    public ResponseEntity<String> encryptObject(@RequestBody UserRequest req
    ) {

        String txt = AESEncryptionService.encryptObject(req);
        return ResponseEntity.ok(txt);

    }

    private boolean isSessionActive(String sessionId) {

        boolean isActive = sessionRepo.IsActive(sessionId);

        return isActive;
    }
}


getall by rol 3

{"userid":26,"rolid":3,"sessionid":"d4ebc623-eafa-418e-b775-eec2426148a4"}
3fYCdUcb8xGWezUkO7HTwnVjby8KHp5z9jIDUouseHLKsJTkV81RnKVmV1ke/EXwpmh8WPFSSG2MvsJnKcLyaKZ9fHSvtQVBAwUrWIbG3sa72SrUgxubhU78OUU3uZLi